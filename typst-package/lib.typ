/*
 * Copyright (c) 2024 Typox Project Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/// Load RDF data from an Oxigraph store using SPARQL queries
///
/// This package provides functions to query RDF data from Oxigraph stores
/// and use the results directly in Typst documents.

/// Load RDF data from an Oxigraph store using SPARQL queries
///
/// This function generates a unique filename based on the query hash and store,
/// then reads the corresponding JSON file that should be generated by the typox binary.
///
/// Usage:
/// ```bash
/// # First, generate data files using typox with --output-dir option:
/// typox --generate-files --output-dir ./data --store /path/to/store
/// ```
///
/// ```typ
/// #import "@preview/oxload:0.1.0": oxload
///
/// #let data = oxload("/path/to/store", "SELECT ?name ?age WHERE { ?person foaf:name ?name ; foaf:age ?age }")
///
/// #for row in data [
///   - Name: #row.name, Age: #row.age
/// ]
/// ```
///
/// Parameters:
/// - store: String - Path to local Oxigraph store or HTTP URL
/// - query: String - SPARQL SELECT query to execute
///
/// Returns: Array of objects with string keys and mixed-type values

#let oxload(store, query) = {
  // Create a deterministic filename based on store and query
  let store-hash = str(calc.rem(hash(store), 1000000))
  let query-hash = str(calc.rem(hash(query), 1000000))
  let filename = "oxload-" + store-hash + "-" + query-hash + ".json"

  // Try to read the pre-generated JSON file
  let data = json(filename)
  return data
}

/// Load RDF data from a pre-generated JSON file
///
/// This is a simpler alternative when you want to specify the exact file path.
///
/// Usage:
/// ```bash
/// # Generate the data file:
/// typox -s /path/to/store -q "SELECT ?name ?age WHERE { ?person foaf:name ?name ; foaf:age ?age }" -o my-data.json
/// ```
///
/// ```typ
/// #import "@preview/oxload:0.1.0": oxload-file
/// #let data = oxload-file("my-data.json")
/// ```
///
/// Parameters:
/// - json-file: String - Path to the JSON file containing query results
///
/// Returns: Array of objects with string keys and mixed-type values

#let oxload-file(json-file) = {
  json(json-file)
}